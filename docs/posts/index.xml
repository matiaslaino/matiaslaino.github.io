<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
    <channel>
        <title>Posts on Stay awhile and listen...</title>
        <link>https://matiaslaino.github.io/posts/</link>
        <description>Recent content in Posts on Stay awhile and listen...</description>
        <generator>Hugo -- gohugo.io</generator>
        <language>en-us</language>
        <copyright>&lt;a href=&#34;https://creativecommons.org/licenses/by-nc/4.0/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;CC BY-NC 4.0&lt;/a&gt;</copyright>
        <lastBuildDate>Fri, 04 Sep 2020 00:00:00 +0000</lastBuildDate>
        <atom:link href="https://matiaslaino.github.io/posts/index.xml" rel="self" type="application/rss+xml" />
        
        <item>
            <title>Using SDL2 with vcpkg and CMake</title>
            <link>https://matiaslaino.github.io/posts/sdl_vcpkg_cmake/</link>
            <pubDate>Fri, 04 Sep 2020 00:00:00 +0000</pubDate>
            
            <guid>https://matiaslaino.github.io/posts/sdl_vcpkg_cmake/</guid>
            <description>Managing dependencies in C++ is much more complicated than it needs to be, thankfully there is a tool from Microsoft that makes it super easy!
is a pseudo-Maven for C++ projects which helps managing libraries; it even manages artifacts for different architectures, very neat :)
After integrating with your build system, just download SDL.
.\vcpkg\vcpkg.exe install sdl2:x64-windows Be careful about selecting the correct triplet (x64-windows in my example), otherwise your linking will fail!</description>
            <content type="html"><![CDATA[<p>Managing dependencies in C++ is much more complicated than it needs to be, thankfully there is a tool from Microsoft that makes it super easy!</p>
<p>is a pseudo-Maven for C++ projects which helps managing libraries; it even manages artifacts for different architectures, very neat :)</p>
<p>After integrating with your build system, just download SDL.</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-powershell" data-lang="powershell">.\vcpkg\vcpkg.exe install sdl2<span style="color:#960050;background-color:#1e0010">:</span>x64-windows
</code></pre></div><p>Be careful about selecting the correct triplet (x64-windows in my example), otherwise your linking will fail!</p>
<p>If integrated with VC++, this should already leave SDL ready to be used with #include, no more messing around with C++ Linker options, VC++ directories and all that nonsense!</p>
<p>If you want to use CLion, however, you&rsquo;ll need to mess around with the CMake file, just add the adequate flag to your CMake configuration:</p>
<pre><code>-DCMAKE_TOOLCHAIN_FILE=C:/dev/vcpkg/scripts/buildsystems/vcpkg.cmake
</code></pre><p>(this is all further explained in vcpkg when you execute it!)</p>
<p>And finally the CMake file.</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-cmake" data-lang="cmake">cmake_minimum_required(<span style="color:#e6db74">VERSION</span> <span style="color:#e6db74">3.17</span>)<span style="color:#960050;background-color:#1e0010">
</span><span style="color:#960050;background-color:#1e0010">
</span><span style="color:#960050;background-color:#1e0010"></span>project(<span style="color:#e6db74">my_project</span>)<span style="color:#960050;background-color:#1e0010">
</span><span style="color:#960050;background-color:#1e0010">
</span><span style="color:#960050;background-color:#1e0010"></span>set(<span style="color:#e6db74">CMAKE_CXX_STANDARD</span> <span style="color:#e6db74">17</span>)<span style="color:#960050;background-color:#1e0010">
</span><span style="color:#960050;background-color:#1e0010">
</span><span style="color:#960050;background-color:#1e0010"></span>find_package(<span style="color:#e6db74">SDL2</span> <span style="color:#e6db74">CONFIG</span> <span style="color:#e6db74">REQUIRED</span>)<span style="color:#960050;background-color:#1e0010">
</span><span style="color:#960050;background-color:#1e0010"></span>find_package(<span style="color:#e6db74">sdl2-image</span> <span style="color:#e6db74">CONFIG</span> <span style="color:#e6db74">REQUIRED</span>)<span style="color:#960050;background-color:#1e0010">
</span><span style="color:#960050;background-color:#1e0010"></span>find_package(<span style="color:#e6db74">sdl2-ttf</span> <span style="color:#e6db74">CONFIG</span> <span style="color:#e6db74">REQUIRED</span>)<span style="color:#960050;background-color:#1e0010">
</span><span style="color:#960050;background-color:#1e0010">
</span><span style="color:#960050;background-color:#1e0010"></span>add_executable(<span style="color:#e6db74">my_project</span> <span style="color:#e6db74">main.cpp</span>)<span style="color:#960050;background-color:#1e0010">
</span><span style="color:#960050;background-color:#1e0010">
</span><span style="color:#960050;background-color:#1e0010"></span>target_link_libraries(<span style="color:#e6db74">my_project</span> <span style="color:#e6db74">PRIVATE</span> <span style="color:#e6db74">SDL2::SDL2</span> <span style="color:#e6db74">SDL2::SDL2main</span>)<span style="color:#960050;background-color:#1e0010">
</span><span style="color:#960050;background-color:#1e0010"></span>target_link_libraries(<span style="color:#e6db74">my_project</span> <span style="color:#e6db74">PRIVATE</span> <span style="color:#e6db74">SDL2::SDL2_image</span>)<span style="color:#960050;background-color:#1e0010">
</span><span style="color:#960050;background-color:#1e0010"></span>target_link_libraries(<span style="color:#e6db74">my_project</span> <span style="color:#e6db74">PRIVATE</span> <span style="color:#e6db74">SDL2::SDL2_ttf</span>)<span style="color:#960050;background-color:#1e0010">
</span></code></pre></div><p>vcpkg is nice enough to tell you exactly which lines to copy and paste in your CMake file.</p>
<p>note: in my example i also linked libraries to sdl2-image and sdl2-ttf library, previously installed using vcpkg.</p>
<p>You&rsquo;re all set to use SDL2 in your C++ project.</p>
<p>Following is a quick example taken from the wonderful <a href="https://lazyfoo.net/tutorials/SDL/index.php">LazyFoo&rsquo;s SDL2 tutorial</a>:</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-c++" data-lang="c++"><span style="color:#75715e">#include</span> <span style="color:#75715e">&lt;iostream&gt;</span><span style="color:#75715e">
</span><span style="color:#75715e">#include</span> <span style="color:#75715e">&lt;SDL_image.h&gt;</span><span style="color:#75715e">
</span><span style="color:#75715e">#include</span> <span style="color:#75715e">&lt;SDL.h&gt;</span><span style="color:#75715e">
</span><span style="color:#75715e"></span>
SDL_Window <span style="color:#f92672">*</span>gWindow <span style="color:#f92672">=</span> NULL;
SDL_Renderer <span style="color:#f92672">*</span>gRenderer <span style="color:#f92672">=</span> NULL;

<span style="color:#66d9ef">bool</span> <span style="color:#a6e22e">init</span>() {
    <span style="color:#75715e">//Initialization flag
</span><span style="color:#75715e"></span>    <span style="color:#66d9ef">bool</span> success <span style="color:#f92672">=</span> true;

    <span style="color:#75715e">//Initialize SDL
</span><span style="color:#75715e"></span>    <span style="color:#66d9ef">if</span> (SDL_Init(SDL_INIT_VIDEO) <span style="color:#f92672">&lt;</span> <span style="color:#ae81ff">0</span>) {
        printf(<span style="color:#e6db74">&#34;SDL could not initialize! SDL Error: %s</span><span style="color:#ae81ff">\n</span><span style="color:#e6db74">&#34;</span>, SDL_GetError());
        success <span style="color:#f92672">=</span> false;
    } <span style="color:#66d9ef">else</span> {
        <span style="color:#75715e">//Set texture filtering to linear
</span><span style="color:#75715e"></span>        <span style="color:#66d9ef">if</span> (<span style="color:#f92672">!</span>SDL_SetHint(SDL_HINT_RENDER_SCALE_QUALITY, <span style="color:#ae81ff">0</span>)) {
            printf(<span style="color:#e6db74">&#34;Warning: Linear texture filtering not enabled!&#34;</span>);
        }

        <span style="color:#75715e">//Create window
</span><span style="color:#75715e"></span>        gWindow <span style="color:#f92672">=</span> SDL_CreateWindow(<span style="color:#e6db74">&#34;My first window&#34;</span>, SDL_WINDOWPOS_UNDEFINED,
                                   SDL_WINDOWPOS_UNDEFINED, <span style="color:#ae81ff">640</span>, <span style="color:#ae81ff">480</span>, SDL_WINDOW_SHOWN);
        <span style="color:#66d9ef">if</span> (gWindow <span style="color:#f92672">==</span> NULL) {
            printf(<span style="color:#e6db74">&#34;Window could not be created! SDL Error: %s</span><span style="color:#ae81ff">\n</span><span style="color:#e6db74">&#34;</span>, SDL_GetError());
            success <span style="color:#f92672">=</span> false;
        } <span style="color:#66d9ef">else</span> {
            <span style="color:#75715e">//Create renderer for window
</span><span style="color:#75715e"></span>            gRenderer <span style="color:#f92672">=</span> SDL_CreateRenderer(gWindow, <span style="color:#f92672">-</span><span style="color:#ae81ff">1</span>, SDL_RENDERER_ACCELERATED <span style="color:#f92672">|</span> SDL_RENDERER_PRESENTVSYNC);
            <span style="color:#66d9ef">if</span> (gRenderer <span style="color:#f92672">==</span> NULL) {
                printf(<span style="color:#e6db74">&#34;Renderer could not be created! SDL Error: %s</span><span style="color:#ae81ff">\n</span><span style="color:#e6db74">&#34;</span>, SDL_GetError());
                success <span style="color:#f92672">=</span> false;
            } <span style="color:#66d9ef">else</span> {
                <span style="color:#75715e">//Initialize renderer color
</span><span style="color:#75715e"></span>                SDL_SetRenderDrawColor(gRenderer, <span style="color:#ae81ff">0xFF</span>, <span style="color:#ae81ff">0xFF</span>, <span style="color:#ae81ff">0xFF</span>, <span style="color:#ae81ff">0xFF</span>);

                <span style="color:#75715e">//Initialize PNG loading
</span><span style="color:#75715e"></span>                <span style="color:#66d9ef">int</span> imgFlags <span style="color:#f92672">=</span> IMG_INIT_PNG;
                <span style="color:#66d9ef">if</span> (<span style="color:#f92672">!</span>(IMG_Init(imgFlags) <span style="color:#f92672">&amp;</span> imgFlags)) {
                    printf(<span style="color:#e6db74">&#34;SDL_image could not initialize! SDL_image Error: %s</span><span style="color:#ae81ff">\n</span><span style="color:#e6db74">&#34;</span>, IMG_GetError());
                    success <span style="color:#f92672">=</span> false;
                }
            }
        }
    }

    <span style="color:#66d9ef">return</span> success;
}

<span style="color:#66d9ef">int</span> <span style="color:#a6e22e">main</span>(<span style="color:#66d9ef">int</span> argc, <span style="color:#66d9ef">char</span> <span style="color:#f92672">*</span>args[]) {
    std<span style="color:#f92672">::</span>cout <span style="color:#f92672">&lt;&lt;</span> <span style="color:#e6db74">&#34;Hello, World!&#34;</span> <span style="color:#f92672">&lt;&lt;</span> std<span style="color:#f92672">::</span>endl;

    <span style="color:#75715e">//Start up SDL and create window
</span><span style="color:#75715e"></span>    <span style="color:#66d9ef">if</span> (<span style="color:#f92672">!</span>init()) {
        printf(<span style="color:#e6db74">&#34;Failed to initialize!</span><span style="color:#ae81ff">\n</span><span style="color:#e6db74">&#34;</span>);
    } <span style="color:#66d9ef">else</span> {
        <span style="color:#75715e">//Load media
</span><span style="color:#75715e"></span>
        <span style="color:#75715e">//Main loop flag
</span><span style="color:#75715e"></span>        <span style="color:#66d9ef">bool</span> quit <span style="color:#f92672">=</span> false;

        <span style="color:#75715e">//Event handler
</span><span style="color:#75715e"></span>        SDL_Event e;

        SDL_RenderSetLogicalSize(gRenderer, <span style="color:#ae81ff">320</span>, <span style="color:#ae81ff">200</span>);

        <span style="color:#75715e">//While application is running
</span><span style="color:#75715e"></span>        <span style="color:#66d9ef">while</span> (<span style="color:#f92672">!</span>quit) {
            <span style="color:#75715e">//Handle events on queue
</span><span style="color:#75715e"></span>            <span style="color:#66d9ef">while</span> (SDL_PollEvent(<span style="color:#f92672">&amp;</span>e) <span style="color:#f92672">!=</span> <span style="color:#ae81ff">0</span>) {
                <span style="color:#75715e">//User requests quit
</span><span style="color:#75715e"></span>                <span style="color:#66d9ef">if</span> (e.type <span style="color:#f92672">==</span> SDL_QUIT) {
                    quit <span style="color:#f92672">=</span> true;
                }
            }

            <span style="color:#75715e">//Clear screen
</span><span style="color:#75715e"></span>            SDL_SetRenderDrawColor(gRenderer, <span style="color:#ae81ff">0</span>, <span style="color:#ae81ff">0</span>, <span style="color:#ae81ff">0xAF</span>, <span style="color:#ae81ff">0</span>);
            SDL_RenderClear(gRenderer);

            <span style="color:#75715e">//Update screen
</span><span style="color:#75715e"></span>            SDL_RenderPresent(gRenderer);
        }
    }

    <span style="color:#66d9ef">return</span> <span style="color:#ae81ff">0</span>;
}
</code></pre></div>]]></content>
        </item>
        
        <item>
            <title>Installing Open JDK 7 in Ubuntu (Tested in 17.04)</title>
            <link>https://matiaslaino.github.io/posts/installing-openjdk-7-in-ubuntu/</link>
            <pubDate>Sat, 07 Oct 2017 00:23:03 +0200</pubDate>
            
            <guid>https://matiaslaino.github.io/posts/installing-openjdk-7-in-ubuntu/</guid>
            <description>Installing Open JDK 7 in Ubuntu (Tested in 17.04) This is the only approach I could find that worked.
Copy of the steps:
 Download the packages intended for your architecture: (for most users, this means amd64 if 64bit, or i386 if 32bit Ubuntu is installed)   openjdk-7-jdk openjdk-7-jre openjdk-7-jre-headless libjpeg62-turbo libfontconfig1 fontconfig-config  (Attempt to) install the packages using dpkg: bash sudo dpkg -i openjdk-7-* libjpeg62-turbo* libfontconfig1* fontconfig-config*  Check the output from dpkg.</description>
            <content type="html"><![CDATA[<h2 id="installing-open-jdk-7-in-ubuntu-tested-in-1704">Installing Open JDK 7 in Ubuntu (Tested in 17.04)</h2>
<p><a href="https://askubuntu.com/a/803616/742055">This is the only approach I could find that worked</a>.</p>
<p>Copy of the steps:</p>
<ol>
<li>Download the packages intended for your architecture:
(for most users, this means amd64 if 64bit, or i386 if 32bit Ubuntu is installed)</li>
</ol>
<ul>
<li><a href="https://packages.debian.org/experimental/openjdk-7-jdk">openjdk-7-jdk</a></li>
<li><a href="https://packages.debian.org/experimental/openjdk-7-jre">openjdk-7-jre</a></li>
<li><a href="https://packages.debian.org/experimental/openjdk-7-jre-headless">openjdk-7-jre-headless</a></li>
<li><a href="https://packages.debian.org/sid/libjpeg62-turbo">libjpeg62-turbo</a></li>
<li><a href="https://packages.debian.org/sid/libfontconfig1">libfontconfig1</a></li>
<li><a href="https://packages.debian.org/sid/fontconfig-config">fontconfig-config</a></li>
</ul>
<ol start="2">
<li>(Attempt to) install the packages using dpkg:
<code>bash sudo dpkg -i openjdk-7-* libjpeg62-turbo* libfontconfig1* fontconfig-config* </code>
Check the output from dpkg. If there were dependency problems - which is likely - you will see the following (with your architecture substituted for amd64):</li>
</ol>
<blockquote>
<p>Errors were encountered while processing:
openjdk-7-jre:amd64
openjdk-7-jre-headless:amd64
openjdk-7-jdk:amd64
If there were no dependency issues, great, you&rsquo;re done, skip to #4. Otherwise, if you need to resolve some dependency issues, this is handled with:</p>
</blockquote>
<ol start="3">
<li><code>bash sudo apt install -f</code>
Notice, there is no need to re-run dpkg after letting apt resolve dependencies. It will automatically finish installation of the openjdk packages.</li>
<li>Update java alternatives. You can view all installed java versions with update-java-alternatives &ndash;list. To activate OpenJDK Java 1.7, run:
<code>bash sudo update-java-alternatives -s java-1.7.0-openjdk-amd64</code>
You may notice an error about the IcedTeaPlugin.so plugin being unavailable. This isn&rsquo;t a real concern for developers working with the JDK.</li>
<li>Verify java is working:
<code>bash java -version</code>
which should output something similar to:</li>
</ol>
<blockquote>
<p>java version &ldquo;1.7.0_121&rdquo;
OpenJDK Runtime Environment (IcedTea 2.6.8) (7u121-2.6.8-1)
OpenJDK 64-Bit Server VM (build 24.121-b00, mixed mode)</p>
</blockquote>
]]></content>
        </item>
        
    </channel>
</rss>
